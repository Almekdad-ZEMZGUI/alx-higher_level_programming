The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

First import the module:

	>>> add_integer = __import__('0-add_integer').add_integer

Normal test cases:

	>>> add_integer(1, 2)
	3
	>>> add_integer(-1, -2)
	-3
	>>> add_integer(100, -2)
	98
	>>> add_integer(-100, 2)
	-98
	>>> add_integer(100.3, 2.9)
	102
	>>> add_integer(2)
	100

Test large integers:
	>>> add_integer(9223372036854775807, -9223372036854775808)
	-1

Test with invalid input type (non-integer):

	>>> add_integer("1", "2")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(0, "2")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
	>>> add_integer("1", 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(0, {'a': 2, 'b': 3})
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
	>>> add_integer(0, float("NaN"))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

Test with infinity:

	>>> add_integer(float("inf"), 2)
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer
	>>> add_integer(float("-inf"), 2)
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

